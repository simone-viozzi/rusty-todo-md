// =======================
// ü¶Ä Rust Comment Parser
// =======================

// The entire Rust file consists of sequences of comments, code, and string literals.
rust_file = { SOI ~ (comment | str_literal | any_non_comment)* ~ EOI }

// =======================
// üéØ TODO Comments Extraction
// =======================

// Single-line `TODO:` (// TODO: ...)
todo_comment = @{
    "//" ~ "TODO:" ~ (!NEWLINE ~ ANY)*
}

// Block-style `TODO:` (/* TODO: ... */)
todo_block_comment = @{
    "/*" ~ "TODO:" ~ (!"*/" ~ ANY)* ~ "*/"
}

// Doc-style `TODO:` (/// TODO: ...)
todo_doc_comment = @{
    "///" ~ "TODO:" ~ (!NEWLINE ~ ANY)*
}

// =======================
// üìå Regular Comments
// =======================

// Single-line comments: `// ...`
line_comment = @{
    "//" ~ (!NEWLINE ~ ANY)*
}

// Block comments: `/* ... */`
block_comment = @{
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}

// Rust doc comments: `/// ...` or `//! ...`
doc_comment = @{
    "///" ~ (!NEWLINE ~ ANY)* |
    "//!" ~ (!NEWLINE ~ ANY)*
}

// General comments (captures any kind of comment)
comment = { todo_comment | todo_block_comment | todo_doc_comment | line_comment | block_comment | doc_comment }

// =======================
// üö´ Ignoring String Literals
// =======================

// Avoids capturing `TODO:` inside strings like `let s = "TODO: fix this";`
str_literal = _{
    "\"" ~ (!"\"" ~ ANY)* ~ "\"" |
    "'" ~ (!"'" ~ ANY)* ~ "'"
}

// =======================
// ‚ùå Any Other Non-Comment Code
// =======================

// Matches everything that is NOT a comment or string
any_non_comment = { !(comment | str_literal) ~ ANY }
