// Minimal Rust grammar focusing on extracting TODO comments while ignoring string literals.

rust_file = { SOI ~ (todo_comment | comment_rust | str_literal | any_non_comment)* ~ EOI }

// =======================
// üéØ TODO Comments
// =======================
// Explicitly capture `TODO:` in single-line, block, and doc comments.
todo_comment = @{
    "//" ~ "TODO:" ~ (!NEWLINE ~ ANY)* |
    "/*" ~ "TODO:" ~ (!"*/" ~ ANY)* ~ "*/" |
    "///" ~ "TODO:" ~ (!NEWLINE ~ ANY)*
}

// =======================
// üìå Regular Comments
// =======================
comment_rust = { line_comment | block_comment | doc_comment_line }

// Single-line: `//` until newline
line_comment = @{
    "//" ~ (!NEWLINE ~ ANY)*
}

// Block comment: `/* ... */` (multi-line allowed)
block_comment = @{
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}

// Doc comment lines start with `///` or `//!` (we unify them)
doc_comment_line = @{
    "///" ~ (!NEWLINE ~ ANY)* |
    "//!" ~ (!NEWLINE ~ ANY)*
}

// =======================
// üö´ Ignoring String Literals
// =======================
// Avoid capturing TODOs inside strings like: let s = "TODO: fix this";
str_literal = _{
    "\"" ~ (!"\"" ~ ANY)* ~ "\"" |
    "'" ~ (!"'" ~ ANY)* ~ "'"
}

// =======================
// ‚ùå Any Other Non-Comment Code
// =======================
// Any code that is not a comment or string
any_non_comment = { !(comment_rust | str_literal) ~ ANY }
