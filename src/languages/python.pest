// We assume the "grammar-extras" feature is on, so we can define COMMENT or WHITESPACE if we want.
//
// For Python, we'll capture top-level "comment" tokens as well as "docstring_comment".

comment_python = { line_comment | docstring_comment }

// Single-line # comment
line_comment = @{
    "#" ~ (!NEWLINE ~ ANY)*
}

// We'll consider triple quotes as docstring_comment for simplicity.
docstring_comment = @{
    "\"\"\"" ~ (!"\"\"\"" ~ ANY)* ~ "\"\"\""
}

// For normal string literals (to skip them), we define a rough rule to ensure we don't treat them as comments:
str_literal = _{
    "\"" ~ (!"\"" ~ ANY)* ~ "\"" |
    "'" ~ (!"'" ~ ANY)* ~ "'"
}

// The main rule: a Python file can have any mixture of comments, string literals, or code (ANY).
// We only want to capture "comment_python" tokens as recognized comment pairs in the parse tree.
python_file = {
    (comment_python | str_literal | ANY)*
}
