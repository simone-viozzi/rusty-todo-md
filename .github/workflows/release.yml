name: release

on:
  workflow_dispatch:
    inputs:
      bump_level:
        description: "Version bump level (major, minor, patch, release, rc, beta, alpha)"
        required: true
        default: "minor"

jobs:
  version_bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure Git Identity
        run: |
          git config --global user.email "release-bot@example.com"
          git config --global user.name "Release Bot"

      - name: Set Up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo-release binary
        id: cache-cargo-release
        uses: actions/cache@v4
        with:
          path: ${{ env.CARGO_HOME }}/bin/cargo-release
          # Stable primary key (bump the suffix if you ever need to bust the cache)
          key: cargo-release-${{ runner.os }}-v1
          # Fallback so future key bumps still reuse older archives
          restore-keys: |
            cargo-release-${{ runner.os }}-

      - name: Install Cargo Release
        if: steps.cache-cargo-release.outputs.cache-hit != 'true'
        run: cargo install cargo-release

      - name: Get Next Version
        id: get_version
        run: |
          out=$(cargo release ${{ github.event.inputs.bump_level }} --dry-run --no-confirm --no-publish --no-tag 2>&1)
          echo "Output: $out"
          next_version=$(printf '%s\n' "$out" \
            | grep -Eo -- 'to [0-9]+\.[0-9]+\.[0-9]+.*$' \
            | awk '{print $2}' \
            | tail -n1)
          echo "Next version: $next_version"
          echo "NEXT_VERSION=$next_version" >> $GITHUB_ENV

      - name: Create Release Branch
        run: |
          git fetch origin main
          BRANCH="release/v${{ env.NEXT_VERSION }}"
          echo "Creating branch $BRANCH"
          git checkout -b "$BRANCH" origin/main
          echo "BRANCH=$BRANCH" >> "$GITHUB_ENV"

      - name: Bump Version
        run: |
          cargo release ${{ github.event.inputs.bump_level }} --execute --no-confirm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}

      - name: Create PR
        id: create_pr
        run: |
          gh pr create --base main \
                      --head "${{ env.BRANCH }}" \
                      --title "Release ${{ env.NEXT_VERSION }}" \
                      --body  "This PR releases version ${{ env.NEXT_VERSION }}"
          # extract the PR number via `gh pr view`
          PR_NUMBER=$(gh pr view "${{ env.BRANCH }}" --json number --jq '.number')
          echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_ENV"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      next_version: ${{ env.NEXT_VERSION }}
      release_branch: ${{ env.BRANCH }}
      pr_number: ${{ env.PR_NUMBER }}

  linux:
    runs-on: ${{ matrix.platform.runner }}
    needs: version_bump
    strategy:
      fail-fast: true
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
          - runner: ubuntu-22.04
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/tags/v${{ needs.version_bump.outputs.next_version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          before-script-linux: |
            # Debian/Ubuntu runners or custom Ubuntu containers
            if command -v apt-get >/dev/null 2>&1; then
              apt-get -qq update
              apt-get install -y \
                perl libssl-dev pkg-config
            # CentOS-based manylinux images (yum) ─ default path for maturin builds
            elif command -v yum >/dev/null 2>&1; then
              yum install -y \
                perl-core perl-IPC-Cmd openssl-devel pkgconfig
            # Fedora/RHEL 9 manylinux_2_28 images (dnf)
            elif command -v dnf >/dev/null 2>&1; then
              dnf install -y \
                perl-core perl-IPC-Cmd openssl-devel pkgconfig
            else
              echo "No known package manager found; skipping system-deps install"
            fi
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    needs: version_bump
    strategy:
      fail-fast: true
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/tags/v${{ needs.version_bump.outputs.next_version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          before-script-linux: |
            # Debian/Ubuntu runners or custom Ubuntu containers
            if command -v apt-get >/dev/null 2>&1; then
              apt-get -qq update
              apt-get install -y \
                perl libssl-dev pkg-config
            # CentOS-based manylinux images (yum) ─ default path for maturin builds
            elif command -v yum >/dev/null 2>&1; then
              yum install -y \
                perl-core perl-IPC-Cmd openssl-devel pkgconfig
            # Fedora/RHEL 9 manylinux_2_28 images (dnf)
            elif command -v dnf >/dev/null 2>&1; then
              dnf install -y \
                perl-core perl-IPC-Cmd openssl-devel pkgconfig
            else
              echo "No known package manager found; skipping system-deps install"
            fi
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    needs: version_bump
    strategy:
      fail-fast: true
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/tags/v${{ needs.version_bump.outputs.next_version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    needs: version_bump
    strategy:
      fail-fast: true
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/tags/v${{ needs.version_bump.outputs.next_version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    needs: version_bump
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/tags/v${{ needs.version_bump.outputs.next_version }}
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [linux, musllinux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "wheels-*/*"
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version_bump.outputs.next_version }}
          name: Release ${{ needs.version_bump.outputs.next_version }}
          body: Automated release generated by GitHub Actions.
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*

  merge_release_pr:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Merge the release PR
        run: |
          gh pr merge ${{ needs.version_bump.outputs.pr_number }} \
            --merge --delete-branch --admin \
            --body "Merged release ${{ needs.version_bump.outputs.next_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
